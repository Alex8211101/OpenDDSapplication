/* Generated by ..\..\..\bin\opendds_idl version 3.12 (ACE version 6.4.6) running on input file S03_TransferFile.idl */
#include "S03_TransferFileTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/CorbaSeq/OctetSeqTypeSupportImpl.h"
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: S03_TransferFile */



/* Begin TYPEDEF: OctetSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const S03_TransferFile::OctetSeq& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * max_marshaled_size_octet();
}

bool operator<<(Serializer& strm, const S03_TransferFile::OctetSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_octet_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, S03_TransferFile::OctetSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_octet_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, S03_TransferFile::OctetSeq*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(length, 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: OctetSeq */


/* Begin STRUCT: FileMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const S03_TransferFile::FileMessage& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.FileMessageID);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.FileMessageTopic.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.PublishMessage.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.PublisherName.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.FileLength);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.MTime.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.ClockTime);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.CatchedFile.in()) + 1;
  gen_find_size(stru.OFile, size, padding);
}

bool operator<<(Serializer& strm, const S03_TransferFile::FileMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.FileMessageID)
    && (strm << stru.FileMessageTopic.in())
    && (strm << stru.PublishMessage.in())
    && (strm << stru.PublisherName.in())
    && (strm << stru.FileLength)
    && (strm << stru.MTime.in())
    && (strm << stru.ClockTime)
    && (strm << stru.CatchedFile.in())
    && (strm << stru.OFile);
}

bool operator>>(Serializer& strm, S03_TransferFile::FileMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.FileMessageID)
    && (strm >> stru.FileMessageTopic.out())
    && (strm >> stru.PublishMessage.out())
    && (strm >> stru.PublisherName.out())
    && (strm >> stru.FileLength)
    && (strm >> stru.MTime.out())
    && (strm >> stru.ClockTime)
    && (strm >> stru.CatchedFile.out())
    && (strm >> stru.OFile);
}

size_t gen_max_marshaled_size(const S03_TransferFile::FileMessage& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const S03_TransferFile::FileMessage> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const S03_TransferFile::FileMessage> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const S03_TransferFile::FileMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<S03_TransferFile::FileMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace S03_TransferFile {
::DDS::DataWriter_ptr FileMessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<FileMessage> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr FileMessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<FileMessage> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr FileMessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<FileMessage> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<FileMessage, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& FileMessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<FileMessage>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool FileMessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* FileMessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
FileMessageTypeSupport::_ptr_type FileMessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<S03_TransferFile::FileMessage> : MetaStruct {
  typedef S03_TransferFile::FileMessage T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
  size_t numDcpsKeys() const { return 0; }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const S03_TransferFile::FileMessage& typed = *static_cast<const S03_TransferFile::FileMessage*>(stru);
    if (std::strcmp(field, "FileMessageID") == 0) {
      return typed.FileMessageID;
    }
    if (std::strcmp(field, "FileMessageTopic") == 0) {
      return typed.FileMessageTopic.in();
    }
    if (std::strcmp(field, "PublishMessage") == 0) {
      return typed.PublishMessage.in();
    }
    if (std::strcmp(field, "PublisherName") == 0) {
      return typed.PublisherName.in();
    }
    if (std::strcmp(field, "FileLength") == 0) {
      return typed.FileLength;
    }
    if (std::strcmp(field, "MTime") == 0) {
      return typed.MTime.in();
    }
    if (std::strcmp(field, "ClockTime") == 0) {
      return typed.ClockTime;
    }
    if (std::strcmp(field, "CatchedFile") == 0) {
      return typed.CatchedFile.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct S03_TransferFile::FileMessage)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "FileMessageID") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'FileMessageID' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'FileMessageID' could not be skipped");
      }
    }
    if (std::strcmp(field, "FileMessageTopic") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'FileMessageTopic' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'FileMessageTopic' length could not be deserialized");
      }
      if (!ser.skip(len)) {
        throw std::runtime_error("String 'FileMessageTopic' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "PublishMessage") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'PublishMessage' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'PublishMessage' length could not be deserialized");
      }
      if (!ser.skip(len)) {
        throw std::runtime_error("String 'PublishMessage' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "PublisherName") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'PublisherName' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'PublisherName' length could not be deserialized");
      }
      if (!ser.skip(len)) {
        throw std::runtime_error("String 'PublisherName' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "FileLength") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'FileLength' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'FileLength' could not be skipped");
      }
    }
    if (std::strcmp(field, "MTime") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'MTime' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'MTime' length could not be deserialized");
      }
      if (!ser.skip(len)) {
        throw std::runtime_error("String 'MTime' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "ClockTime") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'ClockTime' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'ClockTime' could not be skipped");
      }
    }
    if (std::strcmp(field, "CatchedFile") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'CatchedFile' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'CatchedFile' length could not be deserialized");
      }
      if (!ser.skip(len)) {
        throw std::runtime_error("String 'CatchedFile' contents could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<S03_TransferFile::OctetSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct S03_TransferFile::FileMessage");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "FileMessageID") == 0) {
      return make_field_cmp(&T::FileMessageID, next);
    }
    if (std::strcmp(field, "FileMessageTopic") == 0) {
      return make_field_cmp(&T::FileMessageTopic, next);
    }
    if (std::strcmp(field, "PublishMessage") == 0) {
      return make_field_cmp(&T::PublishMessage, next);
    }
    if (std::strcmp(field, "PublisherName") == 0) {
      return make_field_cmp(&T::PublisherName, next);
    }
    if (std::strcmp(field, "FileLength") == 0) {
      return make_field_cmp(&T::FileLength, next);
    }
    if (std::strcmp(field, "MTime") == 0) {
      return make_field_cmp(&T::MTime, next);
    }
    if (std::strcmp(field, "ClockTime") == 0) {
      return make_field_cmp(&T::ClockTime, next);
    }
    if (std::strcmp(field, "CatchedFile") == 0) {
      return make_field_cmp(&T::CatchedFile, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct S03_TransferFile::FileMessage)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"FileMessageID", "FileMessageTopic", "PublishMessage", "PublisherName", "FileLength", "MTime", "ClockTime", "CatchedFile", "OFile", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "FileMessageID") == 0) {
      return &static_cast<const T*>(stru)->FileMessageID;
    }
    if (std::strcmp(field, "FileMessageTopic") == 0) {
      return &static_cast<const T*>(stru)->FileMessageTopic;
    }
    if (std::strcmp(field, "PublishMessage") == 0) {
      return &static_cast<const T*>(stru)->PublishMessage;
    }
    if (std::strcmp(field, "PublisherName") == 0) {
      return &static_cast<const T*>(stru)->PublisherName;
    }
    if (std::strcmp(field, "FileLength") == 0) {
      return &static_cast<const T*>(stru)->FileLength;
    }
    if (std::strcmp(field, "MTime") == 0) {
      return &static_cast<const T*>(stru)->MTime;
    }
    if (std::strcmp(field, "ClockTime") == 0) {
      return &static_cast<const T*>(stru)->ClockTime;
    }
    if (std::strcmp(field, "CatchedFile") == 0) {
      return &static_cast<const T*>(stru)->CatchedFile;
    }
    if (std::strcmp(field, "OFile") == 0) {
      return &static_cast<const T*>(stru)->OFile;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct S03_TransferFile::FileMessage)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "FileMessageID") == 0) {
      static_cast<T*>(lhs)->FileMessageID = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "FileMessageTopic") == 0) {
      static_cast<T*>(lhs)->FileMessageTopic = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "PublishMessage") == 0) {
      static_cast<T*>(lhs)->PublishMessage = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "PublisherName") == 0) {
      static_cast<T*>(lhs)->PublisherName = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "FileLength") == 0) {
      static_cast<T*>(lhs)->FileLength = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "MTime") == 0) {
      static_cast<T*>(lhs)->MTime = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "ClockTime") == 0) {
      static_cast<T*>(lhs)->ClockTime = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "CatchedFile") == 0) {
      static_cast<T*>(lhs)->CatchedFile = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "OFile") == 0) {
      static_cast<T*>(lhs)->OFile = *static_cast<const S03_TransferFile::OctetSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct S03_TransferFile::FileMessage)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "FileMessageID") == 0) {
      return static_cast<const T*>(lhs)->FileMessageID == static_cast<const T*>(rhs)->FileMessageID;
    }
    if (std::strcmp(field, "FileMessageTopic") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->FileMessageTopic.in(), static_cast<const T*>(rhs)->FileMessageTopic.in());
    }
    if (std::strcmp(field, "PublishMessage") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->PublishMessage.in(), static_cast<const T*>(rhs)->PublishMessage.in());
    }
    if (std::strcmp(field, "PublisherName") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->PublisherName.in(), static_cast<const T*>(rhs)->PublisherName.in());
    }
    if (std::strcmp(field, "FileLength") == 0) {
      return static_cast<const T*>(lhs)->FileLength == static_cast<const T*>(rhs)->FileLength;
    }
    if (std::strcmp(field, "MTime") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->MTime.in(), static_cast<const T*>(rhs)->MTime.in());
    }
    if (std::strcmp(field, "ClockTime") == 0) {
      return static_cast<const T*>(lhs)->ClockTime == static_cast<const T*>(rhs)->ClockTime;
    }
    if (std::strcmp(field, "CatchedFile") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->CatchedFile.in(), static_cast<const T*>(rhs)->CatchedFile.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct S03_TransferFile::FileMessage)");
  }
};

template<>
const MetaStruct& getMetaStruct<S03_TransferFile::FileMessage>()
{
  static MetaStructImpl<S03_TransferFile::FileMessage> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, S03_TransferFile::FileMessage*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<S03_TransferFile::FileMessage>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: FileMessage */

/* End MODULE: S03_TransferFile */

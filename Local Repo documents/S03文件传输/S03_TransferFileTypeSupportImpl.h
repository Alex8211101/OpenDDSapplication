/* -*- C++ -*- */
/* Generated by ..\..\..\bin\opendds_idl version 3.12 (ACE version 6.4.6) running on input file S03_TransferFile.idl */
#ifndef OPENDDS_IDL_GENERATED_S03_TRANSFERFILETYPESUPPORTIMPL_H_QNLZHG
#define OPENDDS_IDL_GENERATED_S03_TRANSFERFILETYPESUPPORTIMPL_H_QNLZHG
#include "S03_TransferFileC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "S03_TransferFileTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: S03_TransferFile */



/* Begin TYPEDEF: OctetSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const S03_TransferFile::OctetSeq& seq, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const S03_TransferFile::OctetSeq& seq);

bool operator>>(Serializer& strm, S03_TransferFile::OctetSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, S03_TransferFile::OctetSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: OctetSeq */


/* Begin STRUCT: FileMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const S03_TransferFile::FileMessage& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const S03_TransferFile::FileMessage& stru);

bool operator>>(Serializer& strm, S03_TransferFile::FileMessage& stru);

size_t gen_max_marshaled_size(const S03_TransferFile::FileMessage& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const S03_TransferFile::FileMessage> stru, bool align);

void gen_find_size(KeyOnly<const S03_TransferFile::FileMessage> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const S03_TransferFile::FileMessage> stru);

bool operator>>(Serializer& strm, KeyOnly<S03_TransferFile::FileMessage> stru);

template <>
struct MarshalTraits<S03_TransferFile::FileMessage> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace S03_TransferFile {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct  FileMessage_OpenDDS_KeyLessThan {
  bool operator()(const S03_TransferFile::FileMessage&, const S03_TransferFile::FileMessage&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}


namespace S03_TransferFile {
class FileMessageTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<S03_TransferFile::FileMessage> {
  typedef S03_TransferFile::FileMessage MessageType;
  typedef S03_TransferFile::FileMessageSeq MessageSequenceType;
  typedef S03_TransferFile::FileMessageTypeSupport TypeSupportType;
  typedef S03_TransferFile::FileMessageTypeSupportImpl TypeSupportTypeImpl;
  typedef S03_TransferFile::FileMessageDataWriter DataWriterType;
  typedef S03_TransferFile::FileMessageDataReader DataReaderType;
  typedef S03_TransferFile::FileMessage_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "S03_TransferFile::FileMessage"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace S03_TransferFile {
class  FileMessageTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<FileMessageTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<FileMessage> TraitsType;
  typedef FileMessageTypeSupport TypeSupportType;
  typedef FileMessageTypeSupport::_var_type _var_type;
  typedef FileMessageTypeSupport::_ptr_type _ptr_type;

  FileMessageTypeSupportImpl() {}
  virtual ~FileMessageTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static FileMessageTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<S03_TransferFile::FileMessage>();
bool gen_skip_over(Serializer& ser, S03_TransferFile::FileMessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: FileMessage */

/* End MODULE: S03_TransferFile */
#endif /* OPENDDS_IDL_GENERATED_S03_TRANSFERFILETYPESUPPORTIMPL_H_QNLZHG */
